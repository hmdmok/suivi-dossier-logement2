{"ast":null,"code":"const SECONDS_IN_DAY = 24 * 60 * 60;\nconst MISSING_LEAP_YEAR_DAY = SECONDS_IN_DAY * 1000;\nconst MAGIC_NUMBER_OF_DAYS = 25567 + 2;\n\nconst isDate = date => Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date.getTime());\n/**\n * JavaScript dates can be constructed by passing milliseconds\n * since the Unix epoch (January 1, 1970) example: new Date(12312512312);\n * 1. Subtract number of days between:\n *    Jan 1, 1900 and Jan 1, 1970, plus 2 (\"excel leap year bug\")\n * 2. Convert to milliseconds.\n *\n * @method getJsDateFromExcel\n * @param  {Number}         excelDate\n * @return {Date}\n */\n\n\nmodule.exports.getJsDateFromExcel = excelDate => {\n  if (!Number(excelDate)) {\n    throw new Error('wrong input format');\n  }\n\n  const delta = excelDate - MAGIC_NUMBER_OF_DAYS;\n  const parsed = delta * MISSING_LEAP_YEAR_DAY;\n  const date = new Date(parsed);\n\n  if (!isDate(date)) {\n    throw new Error('wrong excel date input');\n  }\n\n  return date;\n};\n\nmodule.exports.getExcelDateFromJs = date => {\n  if (!isDate(date)) {\n    throw new Error('wrong input format');\n  }\n\n  return date.getTime() / MISSING_LEAP_YEAR_DAY + MAGIC_NUMBER_OF_DAYS;\n};","map":{"version":3,"names":["SECONDS_IN_DAY","MISSING_LEAP_YEAR_DAY","MAGIC_NUMBER_OF_DAYS","isDate","date","Object","prototype","toString","call","isNaN","getTime","module","exports","getJsDateFromExcel","excelDate","Number","Error","delta","parsed","Date","getExcelDateFromJs"],"sources":["C:/Users/moknial01/Documents/suivi-dossier-logement2/node_modules/excel-date-to-js/index.js"],"sourcesContent":["const SECONDS_IN_DAY = 24 * 60 * 60;\nconst MISSING_LEAP_YEAR_DAY = SECONDS_IN_DAY * 1000;\nconst MAGIC_NUMBER_OF_DAYS = (25567 + 2);\n\nconst isDate = date => Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date.getTime())\n\n/**\n * JavaScript dates can be constructed by passing milliseconds\n * since the Unix epoch (January 1, 1970) example: new Date(12312512312);\n * 1. Subtract number of days between:\n *    Jan 1, 1900 and Jan 1, 1970, plus 2 (\"excel leap year bug\")\n * 2. Convert to milliseconds.\n *\n * @method getJsDateFromExcel\n * @param  {Number}         excelDate\n * @return {Date}\n */\nmodule.exports.getJsDateFromExcel = (excelDate) => {\n  if (!Number(excelDate)) {\n    throw new Error('wrong input format')\n  }\n\n  const delta = excelDate - MAGIC_NUMBER_OF_DAYS;\n  const parsed = delta * MISSING_LEAP_YEAR_DAY;\n  const date = new Date(parsed)\n\n  if (!isDate(date)) {\n      throw new Error('wrong excel date input')\n  }\n\n  return date\n}\n\nmodule.exports.getExcelDateFromJs = (date) => {\n  if (!isDate(date)) {\n      throw new Error('wrong input format')\n  }\n\n  return (date.getTime() / MISSING_LEAP_YEAR_DAY) + MAGIC_NUMBER_OF_DAYS\n}\n"],"mappings":"AAAA,MAAMA,cAAc,GAAG,KAAK,EAAL,GAAU,EAAjC;AACA,MAAMC,qBAAqB,GAAGD,cAAc,GAAG,IAA/C;AACA,MAAME,oBAAoB,GAAI,QAAQ,CAAtC;;AAEA,MAAMC,MAAM,GAAGC,IAAI,IAAIC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,IAA/B,MAAyC,eAAzC,IAA4D,CAACK,KAAK,CAACL,IAAI,CAACM,OAAL,EAAD,CAAzF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,CAAeC,kBAAf,GAAqCC,SAAD,IAAe;EACjD,IAAI,CAACC,MAAM,CAACD,SAAD,CAAX,EAAwB;IACtB,MAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGH,SAAS,GAAGZ,oBAA1B;EACA,MAAMgB,MAAM,GAAGD,KAAK,GAAGhB,qBAAvB;EACA,MAAMG,IAAI,GAAG,IAAIe,IAAJ,CAASD,MAAT,CAAb;;EAEA,IAAI,CAACf,MAAM,CAACC,IAAD,CAAX,EAAmB;IACf,MAAM,IAAIY,KAAJ,CAAU,wBAAV,CAAN;EACH;;EAED,OAAOZ,IAAP;AACD,CAdD;;AAgBAO,MAAM,CAACC,OAAP,CAAeQ,kBAAf,GAAqChB,IAAD,IAAU;EAC5C,IAAI,CAACD,MAAM,CAACC,IAAD,CAAX,EAAmB;IACf,MAAM,IAAIY,KAAJ,CAAU,oBAAV,CAAN;EACH;;EAED,OAAQZ,IAAI,CAACM,OAAL,KAAiBT,qBAAlB,GAA2CC,oBAAlD;AACD,CAND"},"metadata":{},"sourceType":"script"}